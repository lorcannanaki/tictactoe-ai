import pygame
import random

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 600, 600
ROWS, COLS = 3, 3
SQUARE_SIZE = WIDTH // COLS

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)

# Fonts
FONT = pygame.font.SysFont(None, 100)

# Functions
def draw_board(screen):
    screen.fill(WHITE)
    for i in range(1, ROWS):
        pygame.draw.line(screen, BLACK, (0, i * SQUARE_SIZE), (WIDTH, i * SQUARE_SIZE))
    for j in range(1, COLS):
        pygame.draw.line(screen, BLACK, (j * SQUARE_SIZE, 0), (j * SQUARE_SIZE, HEIGHT))

def draw_symbols(screen, board):
    for row in range(ROWS):
        for col in range(COLS):
            symbol = board[row][col]
            if symbol != ' ':
                text_surface = FONT.render(symbol, True, BLACK)
                text_rect = text_surface.get_rect(center=(col * SQUARE_SIZE + SQUARE_SIZE // 2, row * SQUARE_SIZE + SQUARE_SIZE // 2))
                screen.blit(text_surface, text_rect)

def check_winner(board):
    # Check rows
    for row in board:
        if all(symbol == 'X' for symbol in row):
            return 'X'
        elif all(symbol == 'O' for symbol in row):
            return 'O'

    # Check columns
    for col in range(COLS):
        if all(board[row][col] == 'X' for row in range(ROWS)):
            return 'X'
        elif all(board[row][col] == 'O' for row in range(ROWS)):
            return 'O'

    # Check diagonals
    if all(board[i][i] == 'X' for i in range(ROWS)) or all(board[i][ROWS - 1 - i] == 'X' for i in range(ROWS)):
        return 'X'
    elif all(board[i][i] == 'O' for i in range(ROWS)) or all(board[i][ROWS - 1 - i] == 'O' for i in range(ROWS)):
        return 'O'

    # Check for draw
    if all(symbol != ' ' for row in board for symbol in row):
        return 'DRAW'

    return None

def get_empty_cells(board):
    empty_cells = []
    for row in range(ROWS):
        for col in range(COLS):
            if board[row][col] == ' ':
                empty_cells.append((row, col))
    return empty_cells

def ai_make_move(board):
    empty_cells = get_empty_cells(board)
    return random.choice(empty_cells)

def main():
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Tic Tac Toe")

    board = [[' ' for _ in range(COLS)] for _ in range(ROWS)]
    turn = 'X'
    winner = None

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN and winner is None:
                x, y = pygame.mouse.get_pos()
                col = x // SQUARE_SIZE
                row = y // SQUARE_SIZE

                if board[row][col] == ' ':
                    board[row][col] = turn
                    winner = check_winner(board)
                    if winner is None:
                        turn = 'O' if turn == 'X' else 'X'
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_r:
                board = [[' ' for _ in range(COLS)] for _ in range(ROWS)]
                turn = 'X'
                winner = None

        if turn == 'O' and winner is None:
            row, col = ai_make_move(board)
            board[row][col] = 'O'
            winner = check_winner(board)
            if winner is None:
                turn = 'X'

        draw_board(screen)
        draw_symbols(screen, board)

        if winner is not None:
            text_surface = FONT.render(winner if winner != 'DRAW' else "Draw!", True, BLUE)
            text_rect = text_surface.get_rect(center=(WIDTH // 2, HEIGHT // 2))
            screen.blit(text_surface, text_rect)

        pygame.display.flip()

    pygame.quit()

if __name__ == "__main__":
    main()
